commit 89d1932148f4416d6017889dfce3b55da8930a44
Author: Richard Imaoka <richard.e.imaoka@gmail.com>
Date:   Sat Aug 6 21:15:10 2022 +0900

    update steps 2

diff --git a/steps/1-setup-apollo-server-and-codegen.sh b/steps/1-setup-apollo-server-and-codegen.sh
index 160c902..cd52eeb 100755
--- a/steps/1-setup-apollo-server-and-codegen.sh
+++ b/steps/1-setup-apollo-server-and-codegen.sh
@@ -4,9 +4,9 @@
 
 # 下図のように 3 つのターミナルを使います。まずは 1 つ目ターミナルを立ち上げて、テンプレートのセットアップから GraphQL Codegen の実行までを行いましょう。
 
-#![アートボード 2.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/75738/7e11f3d9-5947-276f-2860-52e8a96f154e.png)
+# ![アートボード 2.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/75738/7e11f3d9-5947-276f-2860-52e8a96f154e.png)
 
-#:large_orange_diamond: Action: 以下のコマンドを入力してください。一気に全部コピー & ペーストして実行して構いません。
+# :large_orange_diamond: Action: 以下のコマンドを入力してください。一気に全部コピー & ペーストして実行して構いません。
 
 # ```terminal
 mkdir server
diff --git a/steps/2-graphql-scalars.sh b/steps/2-graphql-scalars.sh
index 730e924..8d65b5a 100644
--- a/steps/2-graphql-scalars.sh
+++ b/steps/2-graphql-scalars.sh
@@ -11,7 +11,15 @@ cd server
 npm install graphql-scalars
 # ```
 
-# :large_orange_diamond: Action: 以下のとおり `server/schema.gql` を更新してください。
+# :large_orange_diamond: Action: 以下のコマンドを入力してください。
+
+# ```shell
+git apply patches/258a5ef.patch # update schema.gql
+git apply patches/4bf1886.patch # update index.ts
+git apply patches/6d40e7f.patch # update Query.json
+# ```
+
+# <details><summary>:white_check_mark: Result: 上記コマンドで更新される schema.gql</summary><div>
 
 # ```graphql:server/schema.gql
 # scalar EmailAddress
@@ -26,7 +34,12 @@ npm install graphql-scalars
 # }
 # ```
 
-# :large_orange_diamond: Action: 以下のとおり `server/src/index.ts` を更新してください。
+# ---
+
+# </div></details>
+
+# <details><summary>:white_check_mark: Result: 上記コマンドで更新される index.ts</summary><div>
+
 # ```ts:server/src/index.ts
 # import { ApolloServer, gql } from "apollo-server";
 # import * as fs from "fs";
@@ -82,14 +95,18 @@ npm install graphql-scalars
 #   },
 # });
 
-# // The  method launches a web server.
+# // The `listen` method launches a web server.
 # server.listen().then(({ url }) => {
-#   console.log();
+#   console.log(`🚀  Server ready at ${url}`);
 # });
+
 # ```
 
+# ---
+
+# </div></details>
 
-# :large_orange_diamond: Action: 以下のとおり `server/data/Query.json` を更新してください。
+# <details><summary>:white_check_mark: Result: 上記コマンドで更新される Query.json</summary><div>
 
 # ```json:server/data/Query.json
 # {
@@ -100,78 +117,72 @@ npm install graphql-scalars
 # }
 # ```
 
-# :large_orange_diamond: Action: 以下のとおり `server/src/index.ts` を更新してください。
-#   override in index.ts, and return 10 -> error https://github.com/richardimaoka/tutorial-graphql-scalars/commit/5edea8ed55cf85d145edfc3c36746a74378aa148
-
-# :large_orange_diamond: Action: 以下のとおり `server/config.yml` を更新してください。
-#   config.yml to set string -> static type checking! https://github.com/richardimaoka/tutorial-graphql-scalars/commit/5edea8ed55cf85d145edfc3c36746a74378aa148
-# :white_check_mark: Result: Type Checkingが正しく効いてエラーが表示されます
-
-# :large_orange_diamond: Action: 以下のとおり `server/src/index.ts` を更新してください。
-#   however, returning a string with wrong-format passes static typing... https://github.com/richardimaoka/tutorial-graphql-scalars/commit/3396121dde6f3ced560498c3c07e84b7d1d0d03e
-# :white_check_mark: Result: stringであるというだけでType Checkingが成功してしまい、不正なメールアドレス形式を検知できません。
-
-
-# :large_orange_diamond: Action: Apollo Studio Explorer で以下のクエリを実行してください
-#   querying from apollo studio givens a runtime error
-# :white_check_mark: Result: 以下のようにエラーが表示されます。
-
-# これがgraphql-scalarsをそのまま使った際の限界です。
-
-# EmailAddress - schema.gql, data/Query.json, Apollo Studio
-#   override in index.ts, and return 10 -> error https://github.com/richardimaoka/tutorial-graphql-scalars/commit/5edea8ed55cf85d145edfc3c36746a74378aa148
-#   config.yml to set string -> static type checking! https://github.com/richardimaoka/tutorial-graphql-scalars/commit/5edea8ed55cf85d145edfc3c36746a74378aa148
-        # ![2022-08-03_00h20_53.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/75738/25250495-3c88-b8e3-20f5-c89dca067c1e.png)
-        # (property) emailAddress: Resolver<Maybe<ResolverTypeWrapper<string>>, Person, LoadingDataContext, {}>
-        # Type '(parent: Person, _args: {}, _context: LoadingDataContext, _info: GraphQLResolveInfo) => number' is not assignable to type 'Resolver<Maybe<ResolverTypeWrapper<string>>, Person, LoadingDataContext, {}>'.
-        #   Type '(parent: Person, _args: {}, _context: LoadingDataContext, _info: GraphQLResolveInfo) => number' is not assignable to type 'ResolverFn<Maybe<ResolverTypeWrapper<string>>, Person, LoadingDataContext, {}>'.
-        #     Type 'number' is not assignable to type 'Maybe<ResolverTypeWrapper<string>> | Promise<Maybe<ResolverTypeWrapper<string>>>'.ts(2322)
-        # graphql.ts(170, 3): The expected type comes from property 'emailAddress' which is declared here on type 'PersonResolvers<LoadingDataContext, Person>'
-#   however, returning a string with wrong-format passes static typing... https://github.com/richardimaoka/tutorial-graphql-scalars/commit/3396121dde6f3ced560498c3c07e84b7d1d0d03e
-#   querying from apollo studio givens a runtime error
-    #  ![2022-08-03_00h31_54.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/75738/d5bb9f73-4e20-3c32-9eeb-41e5e4d6c055.png)
-    # {
-    #   "errors": [
-    #     {
-    #       "message": "Value is not a valid email address: someone@@@@@gmail.com",
-    #       "locations": [
-    #         {
-    #           "line": 3,
-    #           "column": 5
-    #         }
-    #       ],
-    #       "path": [
-    #         "me",
-    #         "emailAddress"
-    #       ],
-    #       "extensions": {
-    #         "code": "INTERNAL_SERVER_ERROR",
-    #         "exception": {
-    #           "stacktrace": [
-    #             "TypeError: Value is not a valid email address: someone@@@@@gmail.com",
-    #             "    at GraphQLScalarType.validate$1 (/home/richardimaoka/ghq/src/github.com/richardimaoka/tutorial-graphql-scalars/server/node_modules/graphql-scalars/index.js:917:15)",
-    #             "    at completeLeafValue (/home/richardimaoka/ghq/src/github.com/richardimaoka/tutorial-graphql-scalars/server/node_modules/graphql/execution/execute.js:738:39)",
-    #             "    at completeValue (/home/richardimaoka/ghq/src/github.com/richardimaoka/tutorial-graphql-scalars/server/node_modules/graphql/execution/execute.js:619:12)",
-    #             "    at executeField (/home/richardimaoka/ghq/src/github.com/richardimaoka/tutorial-graphql-scalars/server/node_modules/graphql/execution/execute.js:489:19)",
-    #             "    at executeFields (/home/richardimaoka/ghq/src/github.com/richardimaoka/tutorial-graphql-scalars/server/node_modules/graphql/execution/execute.js:413:20)",
-    #             "    at completeObjectValue (/home/richardimaoka/ghq/src/github.com/richardimaoka/tutorial-graphql-scalars/server/node_modules/graphql/execution/execute.js:914:10)",
-    #             "    at completeValue (/home/richardimaoka/ghq/src/github.com/richardimaoka/tutorial-graphql-scalars/server/node_modules/graphql/execution/execute.js:635:12)",
-    #             "    at executeField (/home/richardimaoka/ghq/src/github.com/richardimaoka/tutorial-graphql-scalars/server/node_modules/graphql/execution/execute.js:489:19)",
-    #             "    at executeFields (/home/richardimaoka/ghq/src/github.com/richardimaoka/tutorial-graphql-scalars/server/node_modules/graphql/execution/execute.js:413:20)",
-    #             "    at executeOperation (/home/richardimaoka/ghq/src/github.com/richardimaoka/tutorial-graphql-scalars/server/node_modules/graphql/execution/execute.js:344:14)"
-    #           ]
-    #         }
-    #       }
-    #     }
-    #   ],
-    #   "data": {
-    #     "me": {
-    #       "emailAddress": null,
-    #       "name": "Jason Summerwinter"
-    #     }
-    #   }
-    # }
+# ---
+
+# </div></details>
+
+# :large_orange_diamond: Action: 以下のコマンドを入力してください。
+
+# ```shell
+git apply patches/8008a13.patch # return 10 in EmailAddress
+# ```
+
+# <details><summary>:white_check_mark: Result: 上記コマンドで更新される index.ts</summary><div>
+
+# ```diff:server/src/index.ts
+# emailAddress(parent, _args, _context, _info) {
+# -  return parent.emailAddress;
+# +  return 10;
+# }
+# ```    
+
+# ---
+
+# </div></details>
+
+# 上記のソースコードは `return 10` としてnumber型の値を返しています。number型ではGraphQLのEmailAddress型の値を表現できないので、TypeScriptの型チェックでエラーを出してほしいところです。そこで以下の変更を行いましょう。
+
+# :large_orange_diamond: Action: 以下のコマンドを入力してください。
+
+# ```shell
+git apply patches/e60bb3a.patch # Update codegen.yml to set EmailAddress as string
+# ```
+
+# <details><summary>:white_check_mark: Result: 上記コマンドで更新される config.yml</summary><div>
+
+# ```diff:config.yml
+# generates:
+#   src/generated/graphql.ts:
+#     plugins:
+#       - "typescript"
+#       - "typescript-resolvers"
+#     config:
+#       avoidOptionals: true
+# +       scalars:
+# +         EmailAddress: string
+# ```    
+
+# ---
+
+# </div></details>
+
+# <details><summary>:white_check_mark: Result: config.ymlの変更に伴って、generated/graphql.ts が自動更新されます。</summary><div>
+
+# ```diff:server/src/generated/graphql.ts
+# export type Scalars = {
+#   ID: string;
+#   String: string;
+#   Boolean: boolean;
+#   Int: number;
+#   Float: number;
+# -  EmailAddress: any;
+# +  EmailAddress: string;
+# };
+# ```    
+
+# ---
 
+# </div></details>
 
 run generate
 npm start
