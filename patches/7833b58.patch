commit 7833b58a8b1c9da4cc1c0386fcdc0f4af729258b
Author: Richard Imaoka <richard.e.imaoka@gmail.com>
Date:   Sat Aug 6 09:16:32 2022 +0900

    add CountryCode to schema.gql

diff --git a/server/schema.gql b/server/schema.gql
index acd47e6..81edf42 100644
--- a/server/schema.gql
+++ b/server/schema.gql
@@ -1,10 +1,13 @@
 scalar EmailAddress
+scalar CountryCode
 
 type Person {
   emailAddress: EmailAddress
   name: String
+  country: CountryCode
 }
 
 type Query {
   me: Person
+  search(country: CountryCode): [Person]
 }
diff --git a/server/src/generated/graphql.ts b/server/src/generated/graphql.ts
index 0270e8f..01cc175 100644
--- a/server/src/generated/graphql.ts
+++ b/server/src/generated/graphql.ts
@@ -21,11 +21,13 @@ export type Scalars = {
   Boolean: boolean;
   Int: number;
   Float: number;
+  CountryCode: any;
   EmailAddress: string;
 };
 
 export type Person = {
   __typename?: "Person";
+  country: Maybe<Scalars["CountryCode"]>;
   emailAddress: Maybe<Scalars["EmailAddress"]>;
   name: Maybe<Scalars["String"]>;
 };
@@ -33,6 +35,11 @@ export type Person = {
 export type Query = {
   __typename?: "Query";
   me: Maybe<Person>;
+  search: Maybe<Array<Maybe<Person>>>;
+};
+
+export type QuerySearchArgs = {
+  country: InputMaybe<Scalars["CountryCode"]>;
 };
 
 export type ResolverTypeWrapper<T> = Promise<T> | T;
@@ -143,6 +150,7 @@ export type DirectiveResolverFn<
 /** Mapping between all available schema types and the resolvers types */
 export type ResolversTypes = {
   Boolean: ResolverTypeWrapper<Scalars["Boolean"]>;
+  CountryCode: ResolverTypeWrapper<Scalars["CountryCode"]>;
   EmailAddress: ResolverTypeWrapper<Scalars["EmailAddress"]>;
   Person: ResolverTypeWrapper<Person>;
   Query: ResolverTypeWrapper<{}>;
@@ -152,12 +160,18 @@ export type ResolversTypes = {
 /** Mapping between all available schema types and the resolvers parents */
 export type ResolversParentTypes = {
   Boolean: Scalars["Boolean"];
+  CountryCode: Scalars["CountryCode"];
   EmailAddress: Scalars["EmailAddress"];
   Person: Person;
   Query: {};
   String: Scalars["String"];
 };
 
+export interface CountryCodeScalarConfig
+  extends GraphQLScalarTypeConfig<ResolversTypes["CountryCode"], any> {
+  name: "CountryCode";
+}
+
 export interface EmailAddressScalarConfig
   extends GraphQLScalarTypeConfig<ResolversTypes["EmailAddress"], any> {
   name: "EmailAddress";
@@ -167,6 +181,11 @@ export type PersonResolvers<
   ContextType = any,
   ParentType extends ResolversParentTypes["Person"] = ResolversParentTypes["Person"]
 > = {
+  country: Resolver<
+    Maybe<ResolversTypes["CountryCode"]>,
+    ParentType,
+    ContextType
+  >;
   emailAddress: Resolver<
     Maybe<ResolversTypes["EmailAddress"]>,
     ParentType,
@@ -181,9 +200,16 @@ export type QueryResolvers<
   ParentType extends ResolversParentTypes["Query"] = ResolversParentTypes["Query"]
 > = {
   me: Resolver<Maybe<ResolversTypes["Person"]>, ParentType, ContextType>;
+  search: Resolver<
+    Maybe<Array<Maybe<ResolversTypes["Person"]>>>,
+    ParentType,
+    ContextType,
+    Partial<QuerySearchArgs>
+  >;
 };
 
 export type Resolvers<ContextType = any> = {
+  CountryCode: GraphQLScalarType;
   EmailAddress: GraphQLScalarType;
   Person: PersonResolvers<ContextType>;
   Query: QueryResolvers<ContextType>;
