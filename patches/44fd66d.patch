commit 44fd66d52537a601a95b2f1c64077167de48ef11
Author: Richard Imaoka <richard.e.imaoka@gmail.com>
Date:   Mon Aug 8 00:20:49 2022 +0900

    ok up tp steps 2 tutorial

diff --git a/steps/1-setup-apollo-server-and-codegen.sh b/steps/1-setup-apollo-server-and-codegen.sh
index fffbfe7..2cc9314 100755
--- a/steps/1-setup-apollo-server-and-codegen.sh
+++ b/steps/1-setup-apollo-server-and-codegen.sh
@@ -4,7 +4,7 @@
 
 # 下図のように 3 つのターミナルを使います。まずは 1 つ目ターミナルを立ち上げて、テンプレートのセットアップから GraphQL Codegen の実行までを行いましょう。
 
-# ![アートボード 2.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/75738/7e11f3d9-5947-276f-2860-52e8a96f154e.png)
+# ![アートボード 15.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/75738/2a1f7fc4-b122-eac6-1123-1bffec13dd34.png)
 
 # :large_orange_diamond: Action: 以下のコマンドを入力してください。一気に全部コピー & ペーストして実行して構いません。
 
@@ -63,7 +63,7 @@ npm run generate
 
 # :large_orange_diamond: Action: 新しいターミナルを立ち上げてください。
 
-# ![アートボード 3.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/75738/434595ea-e610-5830-44f2-5a9e58e4c9fe.png)
+# ![アートボード 16.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/75738/bee9641c-c23d-7dc1-3518-b09e7d212a58.png)
 
 # :large_orange_diamond: Action: 以下のコマンドを入力してください。
 
diff --git a/steps/2-graphql-scalars.sh b/steps/2-graphql-scalars.sh
index 2599fe6..1972d75 100644
--- a/steps/2-graphql-scalars.sh
+++ b/steps/2-graphql-scalars.sh
@@ -7,6 +7,10 @@ cd ../ || exit               # REMOVE THIS IN aggregate.sh - cd to the git repos
 
 # :large_orange_diamond: Action: 新しいターミナルを立ち上げてください。
 
+# ![アートボード 17.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/75738/128eb33f-2f1f-b06c-3267-3714bc867e52.png)
+
+# :large_orange_diamond: Action: 以下のコマンドを入力してください。
+
 # ```:terminal
 # shellcheck disable=SC2164 # REMOVE THIS IN aggregate.sh
 (cd server && npm install graphql-scalars)
@@ -141,7 +145,9 @@ git apply patches/8008a13.patch # return 10 in EmailAddress
 
 # </div></details>
 
-# 上記のソースコードは `return 10` としてnumber型の値を返しています。number型ではGraphQLのEmailAddress型の値を表現できないので、TypeScriptの型チェックでエラーを出してほしいところです。そこで以下の変更を行いましょう。
+# 上記のソースコードは `return 10` としてnumber型の値を返していますが、TypeScriptの型チェックはエラーを出力してくれません。
+
+# number型ではGraphQLのEmailAddress型の値を表現できないので、TypeScriptの型チェックでエラーを出してほしいところです。そこで以下の変更を行いましょう。
 
 # :large_orange_diamond: Action: 以下のコマンドを入力してください。
 
@@ -167,6 +173,7 @@ git apply patches/e60bb3a.patch # Update codegen.yml to set EmailAddress as stri
 
 # </div></details>
 
+
 # <details><summary>:white_check_mark: Result: config.ymlの変更に伴って、generated/graphql.ts が自動更新されます。</summary><div>
 
 # ```diff:server/src/generated/graphql.ts
@@ -189,18 +196,19 @@ git apply patches/e60bb3a.patch # Update codegen.yml to set EmailAddress as stri
 
 # <details><summary>:white_check_mark: Result: エラーの確認</summary><div>
 
+# ![2022-08-06_21h33_37.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/75738/11ef1c95-72e1-1ce8-446b-dd61a50cfb23.png)
+
+
 # ```terminal
 # Type 'number' is not assignable to type 'Maybe<ResolverTypeWrapper<string>> | Promise<Maybe<ResolverTypeWrapper<string>>>'
 # The expected type comes from property 'emailAddress' which is declared here on type 'PersonResolvers<LoadingDataContext, Person>'
 # ```
 
-# ![2022-08-06_21h33_37.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/75738/11ef1c95-72e1-1ce8-446b-dd61a50cfb23.png)
-
 # ---
 
 # </div></details>
 
-# しかし、上記のようなgraphql-scalarsが提供する機能のみを使った型チェックは:
+# TypeScriptの型チェックがうまく動作しましたが、上記のようなgraphql-scalarsが提供する機能のみを使った型チェックでは、以下のような限界があります:
 
 #   - stringが期待されるところでnumberをreturnするようなエラーを検出できます
 #   - しかし、stringではあるものの、EmailAddressの形式として間違っているものはエラーにはなりません
@@ -227,7 +235,7 @@ git apply patches/4efc7a3.patch # wrong email address format passes type checkin
 
 # </div></details>
 
-# こちらはランタイムエラーでのみ検出可能になります。
+# こちらはTypeScriptの型チェックではエラーを検出できず、ランタイムエラーでのみ検出可能になります。
 
 # <details><summary>:white_check_mark: Result: Apollo Studio Explorerでランタイムエラーを確認</summary><div>
 
@@ -238,7 +246,7 @@ git apply patches/4efc7a3.patch # wrong email address format passes type checkin
 # </div></details>
 
 # :::note info
-# 静的型チェックによってEmailAddressに変換できない形式のstringをエラーとして検出するには、このチュートリアルのあとの方で紹介する独自typeの定義を使ったテクニックが必要です。
+# TypeScriptの静的型チェックによってEmailAddressに変換できない形式のstringをエラーとして検出するには、このチュートリアルのあとの方で紹介する独自typeの定義を使ったテクニックが必要です。
 # :::
 
 # それでは、graphql-scalarsが提供する機能のみを使った場合の型チェックの動作がわかったので、emailAddressをQuery.jsonファイルから値を取得する形に戻します。
diff --git a/steps/3-many-custom-scalars.sh b/steps/3-many-custom-scalars.sh
index e6c9584..d86d70d 100644
--- a/steps/3-many-custom-scalars.sh
+++ b/steps/3-many-custom-scalars.sh
@@ -145,7 +145,7 @@ git apply patches/20f9644.patch # many custom scalars
 
 # </div></details>
 
-# <details><summary>Apollo Studio Explorerで確認</summary><div>
+# <details><summary>:white_check_mark: Result: Apollo Studio Explorerで確認</summary><div>
 
 
 # ---
diff --git a/steps/4-argument-type.sh b/steps/4-argument-type.sh
index bd5e398..2909e70 100755
--- a/steps/4-argument-type.sh
+++ b/steps/4-argument-type.sh
@@ -3,8 +3,138 @@
 cd "$(dirname "$0")" || exit # REMOVE THIS IN aggregate.sh
 cd ../ || exit               # REMOVE THIS IN aggregate.sh - cd to the git repository root
 
-# ## graphql-scalarsをargument型に使った際の動作確認
+# ## 4. graphql-scalarsをargument型に使った際の動作確認
 
-# argument type
-#   Apollo Studio, send wrong type - error
-#   Apollo Studio, send wrong format - error
\ No newline at end of file
+# ここまではfieldの型にcustom scalarを使う方法を見てきましたが、ここからはargument型の場合を見てみましょう。searchというfieldを追加し、そのargumentでcustom scalarであるCountryCodeを使います。
+
+# :large_orange_diamond: Action: 以下のコマンドを入力してください。
+
+# ```shell
+git apply patches/7833b58.patch # add CountryCode to schema.gql
+# ```
+
+# <details><summary>:white_check_mark: Result: 上記コマンドで更新される schema.gql</summary><div>
+
+# ```diff:server/schema.gql
+# scalar EmailAddress
+# + scalar CountryCode
+
+# type Person {
+#   emailAddress: EmailAddress
+#   name: String
+# +   country: CountryCode
+# }
+
+# type Query {
+#   me: Person
+# +  search(country: CountryCode): [Person]
+# }
+# ```
+
+# ---
+
+# </div></details>
+
+# :large_orange_diamond: Action: 以下のコマンドを入力してください。
+
+# ```shell
+git apply patches/c1d6bcd.patch # add country to index.ts
+# ```
+
+# <details><summary>:white_check_mark: Result: 上記コマンドで更新される index.ts</summary><div>
+
+# ```diff:server/src/index.ts
+# import { ApolloServer, gql } from "apollo-server";
+# import * as fs from "fs";
+# - import { EmailAddressResolver } from "graphql-scalars";
+# + import { CountryCodeResolver, EmailAddressResolver } from "graphql-scalars";
+# import { Query, Resolvers } from "./generated/graphql";
+
+# const typeDefs = gql`
+# @@ -16,6 +16,9 @@ const resolvers: Resolvers<LoadingDataContext> = {
+#     me(_parent, _args, context, _info) {
+#       return context.Query.me;
+#     },
+# +     search(_parent, _args, context, _info) {
+# +       return context.Query.search;
+# +     },
+#   },
+#   Person: {
+#     name(parent, _args, _context, _info) {
+# @@ -24,8 +27,12 @@ const resolvers: Resolvers<LoadingDataContext> = {
+#     emailAddress(parent, _args, _context, _info) {
+#       return parent.emailAddress;
+#     },
+# +     country(parent, _args, _context, _info) {
+# +       return parent.country;
+# +     },
+#   },
+#   EmailAddress: EmailAddressResolver,
+# +   CountryCode: CountryCodeResolver,
+# };
+
+# const readJsonFile = async (relativeFileName: string): Promise<any> => {
+# ```
+
+# ---
+
+# </div></details>
+
+# :large_orange_diamond: Action: 以下のコマンドを入力してください。
+
+# ```shell
+git apply patches/3f8aece.patch # update data/Query.json
+# ```
+
+# <details><summary>:white_check_mark: Result: 上記コマンドで更新される Query.json</summary><div>
+
+# ```diff:server/data/Query.json
+# {
+#   "me": {
+#     "emailAddress": "jason.summerwinnter@gmail.com",
+# -     "name": "Jason Summerwinter"
+# -   }
+# +     "name": "Jason Summerwinter",
+# +     "country": "JP"
+# +   },
+# +   "search": [
+# +     {
+# +       "emailAddress": "jason.fallspring@gmail.com",
+# +       "name": "Jason FallSpring",
+# +       "country": "JP"
+# +     },
+# +     {
+# +       "emailAddress": "kate.heartspadediamond@gmail.com",
+# +       "name": "Kate HeartSpadeDiamond",
+# +       "country": "JP"
+# +     },
+# +     {
+# +       "emailAddress": "yosuke.kishidamax@gmail.com",
+# +       "name": "Yosuke KishidaMax",
+# +       "country": "JP"
+# +     },
+# +     {
+# +       "emailAddress": "bob.BobbDobb@gmail.com",
+# +       "name": "Bob BobbDobb",
+# +       "country": "JP"
+# +     }
+# +   ]
+# }
+# ```
+
+# ---
+
+# </div></details>
+
+# :large_orange_diamond: Action: Apollo Studio Explorerからクエリを実行して、動作を確認してください。
+
+# <details><summary>:white_check_mark: Result: Apollo Studio Explorerからクエリの実行</summary><div>
+
+# 型チェックエラー
+# ランタイムエラー
+
+# ---
+
+# </div></details>
+
+# argumentでcustom scalarを使ったときの動作がこれで確認できました。
diff --git a/steps/5-optional.sh b/steps/5-optional.sh
index 5bb2dcd..56d60a1 100755
--- a/steps/5-optional.sh
+++ b/steps/5-optional.sh
@@ -3,28 +3,59 @@
 cd "$(dirname "$0")" || exit # REMOVE THIS IN aggregate.sh
 cd ../ || exit               # REMOVE THIS IN aggregate.sh - cd to the git repository root
 
-git apply # restore the EmailAddress information from the string type in JavaScript
-
-# if you use a text schema definition, you can't use ScalrNameTypeDefinition
-
-# nested structure
-#   https://www.graphql-scalars.dev/docs/quick-start
-#   type Person {
-#     birthDate: DateTime
-#     ageInYears: PositiveInt
-#     heightInInches: PositiveFloat
-#     minimumHourlyRate: NonNegativeFloat
-#     currentlyActiveProjects: NonNegativeInt
-#     email: EmailAddress
-#     homePage: URL
-#     phoneNumber: PhoneNumber
-#     homePostalCode: PostalCode
-#    }
-#
-#    or types for realistic apps, like Reviewer and Store, etc
-
-# many more scalar types
-
-# if you use .gql schema file, you can't use ScalrNameTypeDefinition
-
-npm
\ No newline at end of file
+
+# ## 5. 
+
+# :large_orange_diamond: Action: 以下のコマンドを入力してください。
+
+# ```shell
+npm install --save-dev @graphql-codegen/add 
+# ```
+
+# :large_orange_diamond: Action: 以下のコマンドを入力してください。
+
+# ```shell
+git apply patches/a827496.patch # EmailAddressString type
+# ```
+
+# :large_orange_diamond: Action: 以下のコマンドを入力してください。
+
+# ```shell
+git apply patches/3288f62.patch # Use EmailAddressString in codegen.yml
+# ```
+
+# :large_orange_diamond: Action: 以下のコマンドを入力してください。
+
+# ```shell
+git apply patches/04ba80e.patch # emailAddress does not allow plain string
+# ```
+
+# :large_orange_diamond: Action: 以下のコマンドを入力してください。
+
+# ```shell
+git apply patches/f97f618.patch # working
+# ```
+
+# :large_orange_diamond: Action: 以下のコマンドを入力してください。
+
+# ```shell
+git apply patches/dfeb0f2.patch # wrong format email is validated near the database
+# ```
+
+# :large_orange_diamond: Action: 以下のコマンドを入力してください。
+
+# ```shell
+git apply patches/9cf4c7d.patch # correct email format
+# ```
+
+# :large_orange_diamond: Action: 以下のコマンドを入力してください。
+
+# ```shell
+git apply patches/3c89889.patch # make search argument required
+# ```
+
+# :large_orange_diamond: Action: 以下のコマンドを入力してください。
+
+# ```shell
+git apply patches/061847a.patch # revert back index.ts
+# ```
