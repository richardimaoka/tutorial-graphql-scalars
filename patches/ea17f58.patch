commit ea17f58216b303c1f6cbe4f58f9e6a3f29c50926
Author: Richard Imaoka <richard.e.imaoka@gmail.com>
Date:   Sun Jul 31 16:08:19 2022 +0900

    some more update

diff --git a/server/codegen.yml b/server/codegen.yml
index 0de22f5..a777c66 100644
--- a/server/codegen.yml
+++ b/server/codegen.yml
@@ -8,6 +8,8 @@ generates:
       - "typescript-resolvers"
     config:
       avoidOptionals: true
+      scalars:
+        Timestamp: string
 hooks:
   afterOneFileWrite:
     - npx prettier --write
diff --git a/server/data/Query.json b/server/data/Query.json
index 265f1bb..de7be41 100644
--- a/server/data/Query.json
+++ b/server/data/Query.json
@@ -1,4 +1,4 @@
 {
   "hello": "Hello World",
-  "url": "https://google.com"
+  "url": "https:||google.com"
 }
diff --git a/server/schema.gql b/server/schema.gql
index f24de58..52b95ce 100644
--- a/server/schema.gql
+++ b/server/schema.gql
@@ -1,6 +1,8 @@
 scalar URL
+scalar Timestamp
 
 type Query {
   hello: String
   url: URL
+  search(from: Timestamp, to: Timestamp): [String]
 }
diff --git a/server/src/generated/graphql.ts b/server/src/generated/graphql.ts
index 8dcea8e..6d1b85c 100644
--- a/server/src/generated/graphql.ts
+++ b/server/src/generated/graphql.ts
@@ -21,15 +21,22 @@ export type Scalars = {
   Boolean: boolean;
   Int: number;
   Float: number;
+  Timestamp: string;
   URL: any;
 };
 
 export type Query = {
   __typename?: "Query";
   hello: Maybe<Scalars["String"]>;
+  search: Maybe<Array<Maybe<Scalars["String"]>>>;
   url: Maybe<Scalars["URL"]>;
 };
 
+export type QuerySearchArgs = {
+  from: InputMaybe<Scalars["Timestamp"]>;
+  to: InputMaybe<Scalars["Timestamp"]>;
+};
+
 export type ResolverTypeWrapper<T> = Promise<T> | T;
 
 export type ResolverWithResolve<TResult, TParent, TContext, TArgs> = {
@@ -140,6 +147,7 @@ export type ResolversTypes = {
   Boolean: ResolverTypeWrapper<Scalars["Boolean"]>;
   Query: ResolverTypeWrapper<{}>;
   String: ResolverTypeWrapper<Scalars["String"]>;
+  Timestamp: ResolverTypeWrapper<Scalars["Timestamp"]>;
   URL: ResolverTypeWrapper<Scalars["URL"]>;
 };
 
@@ -148,6 +156,7 @@ export type ResolversParentTypes = {
   Boolean: Scalars["Boolean"];
   Query: {};
   String: Scalars["String"];
+  Timestamp: Scalars["Timestamp"];
   URL: Scalars["URL"];
 };
 
@@ -156,9 +165,20 @@ export type QueryResolvers<
   ParentType extends ResolversParentTypes["Query"] = ResolversParentTypes["Query"]
 > = {
   hello: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
+  search: Resolver<
+    Maybe<Array<Maybe<ResolversTypes["String"]>>>,
+    ParentType,
+    ContextType,
+    Partial<QuerySearchArgs>
+  >;
   url: Resolver<Maybe<ResolversTypes["URL"]>, ParentType, ContextType>;
 };
 
+export interface TimestampScalarConfig
+  extends GraphQLScalarTypeConfig<ResolversTypes["Timestamp"], any> {
+  name: "Timestamp";
+}
+
 export interface UrlScalarConfig
   extends GraphQLScalarTypeConfig<ResolversTypes["URL"], any> {
   name: "URL";
@@ -166,5 +186,6 @@ export interface UrlScalarConfig
 
 export type Resolvers<ContextType = any> = {
   Query: QueryResolvers<ContextType>;
+  Timestamp: GraphQLScalarType;
   URL: GraphQLScalarType;
 };
diff --git a/server/src/index.ts b/server/src/index.ts
index e66ee6c..0e062a2 100644
--- a/server/src/index.ts
+++ b/server/src/index.ts
@@ -1,6 +1,6 @@
 import { ApolloServer, gql } from "apollo-server";
 import * as fs from "fs";
-import { URLResolver } from "graphql-scalars";
+import { TimestampResolver, URLResolver } from "graphql-scalars";
 import { Query, Resolvers } from "./generated/graphql";
 
 const typeDefs = gql`
@@ -19,8 +19,14 @@ const resolvers: Resolvers<LoadingDataContext> = {
     url: async (parent, args, context, info) => {
       return context.Query.url;
     },
+    search: async (parent, args, context, info) => {
+      const from = args.from;
+      const to = args.to;
+      return [];
+    },
   },
   URL: URLResolver,
+  Timestamp: TimestampResolver,
 };
 
 const readJsonFile = async (relativeFileName: string): Promise<any> => {
diff --git a/steps/2-setup-codegen.sh b/steps/2-setup-codegen.sh
index dab2bf4..1afe9ea 100644
--- a/steps/2-setup-codegen.sh
+++ b/steps/2-setup-codegen.sh
@@ -3,18 +3,15 @@
 cd "$(dirname "$0")" || exit # REMOVE THIS IN aggregate.sh
 cd ../ || exit               # REMOVE THIS IN aggregate.sh - cd to the git repository root
 
-
-git apply # schema.gql
-git apply # use generated types in src/index.ts
-
-git apply # use data.json
-git apply # define context type
-
-# query from apollo studio
-
-
-
-
+# npm install graphql-scalars
+# EmailAddress - schema.gql, data/Query.json, Apollo Studio
+#   not from Query.json, but override in index.ts, and return 10 -> error
+#   config.yml to set string -> static type checking!
+#   however, returning a string with wrong-format passes static typing...
+
+# argument type
+#   Apollo Studio, send wrong type - error
+#   Apollo Studio, send wrong format - error
 
 
 
diff --git a/steps/4-optional.sh b/steps/4-optional.sh
index 31db0b6..9e9f616 100755
--- a/steps/4-optional.sh
+++ b/steps/4-optional.sh
@@ -7,4 +7,7 @@ git apply # restore the EmailAddress information from the string type in JavaScr
 
 # if you use a text schema definition, you can't use ScalrNameTypeDefinition
 
+# Store and Reviewer structure
+
 # many more scalar types
+
