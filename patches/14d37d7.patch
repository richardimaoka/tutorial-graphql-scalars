commit 14d37d7fa80fc78432a2b5339c104a8c8b1dd88f
Author: Richard Imaoka <richard.e.imaoka@gmail.com>
Date:   Wed Aug 3 00:16:04 2022 +0900

    change schema ============

diff --git a/server/schema.gql b/server/schema.gql
index 52b95ce..acd47e6 100644
--- a/server/schema.gql
+++ b/server/schema.gql
@@ -1,8 +1,10 @@
-scalar URL
-scalar Timestamp
+scalar EmailAddress
+
+type Person {
+  emailAddress: EmailAddress
+  name: String
+}
 
 type Query {
-  hello: String
-  url: URL
-  search(from: Timestamp, to: Timestamp): [String]
+  me: Person
 }
diff --git a/server/src/generated/graphql.ts b/server/src/generated/graphql.ts
index 6d1b85c..5072f36 100644
--- a/server/src/generated/graphql.ts
+++ b/server/src/generated/graphql.ts
@@ -21,20 +21,18 @@ export type Scalars = {
   Boolean: boolean;
   Int: number;
   Float: number;
-  Timestamp: string;
-  URL: any;
+  EmailAddress: any;
 };
 
-export type Query = {
-  __typename?: "Query";
-  hello: Maybe<Scalars["String"]>;
-  search: Maybe<Array<Maybe<Scalars["String"]>>>;
-  url: Maybe<Scalars["URL"]>;
+export type Person = {
+  __typename?: "Person";
+  emailAddress: Maybe<Scalars["EmailAddress"]>;
+  name: Maybe<Scalars["String"]>;
 };
 
-export type QuerySearchArgs = {
-  from: InputMaybe<Scalars["Timestamp"]>;
-  to: InputMaybe<Scalars["Timestamp"]>;
+export type Query = {
+  __typename?: "Query";
+  me: Maybe<Person>;
 };
 
 export type ResolverTypeWrapper<T> = Promise<T> | T;
@@ -145,47 +143,48 @@ export type DirectiveResolverFn<
 /** Mapping between all available schema types and the resolvers types */
 export type ResolversTypes = {
   Boolean: ResolverTypeWrapper<Scalars["Boolean"]>;
+  EmailAddress: ResolverTypeWrapper<Scalars["EmailAddress"]>;
+  Person: ResolverTypeWrapper<Person>;
   Query: ResolverTypeWrapper<{}>;
   String: ResolverTypeWrapper<Scalars["String"]>;
-  Timestamp: ResolverTypeWrapper<Scalars["Timestamp"]>;
-  URL: ResolverTypeWrapper<Scalars["URL"]>;
 };
 
 /** Mapping between all available schema types and the resolvers parents */
 export type ResolversParentTypes = {
   Boolean: Scalars["Boolean"];
+  EmailAddress: Scalars["EmailAddress"];
+  Person: Person;
   Query: {};
   String: Scalars["String"];
-  Timestamp: Scalars["Timestamp"];
-  URL: Scalars["URL"];
 };
 
-export type QueryResolvers<
+export interface EmailAddressScalarConfig
+  extends GraphQLScalarTypeConfig<ResolversTypes["EmailAddress"], any> {
+  name: "EmailAddress";
+}
+
+export type PersonResolvers<
   ContextType = any,
-  ParentType extends ResolversParentTypes["Query"] = ResolversParentTypes["Query"]
+  ParentType extends ResolversParentTypes["Person"] = ResolversParentTypes["Person"]
 > = {
-  hello: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
-  search: Resolver<
-    Maybe<Array<Maybe<ResolversTypes["String"]>>>,
+  emailAddress: Resolver<
+    Maybe<ResolversTypes["EmailAddress"]>,
     ParentType,
-    ContextType,
-    Partial<QuerySearchArgs>
+    ContextType
   >;
-  url: Resolver<Maybe<ResolversTypes["URL"]>, ParentType, ContextType>;
+  name: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
+  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
 };
 
-export interface TimestampScalarConfig
-  extends GraphQLScalarTypeConfig<ResolversTypes["Timestamp"], any> {
-  name: "Timestamp";
-}
-
-export interface UrlScalarConfig
-  extends GraphQLScalarTypeConfig<ResolversTypes["URL"], any> {
-  name: "URL";
-}
+export type QueryResolvers<
+  ContextType = any,
+  ParentType extends ResolversParentTypes["Query"] = ResolversParentTypes["Query"]
+> = {
+  me: Resolver<Maybe<ResolversTypes["Person"]>, ParentType, ContextType>;
+};
 
 export type Resolvers<ContextType = any> = {
+  EmailAddress: GraphQLScalarType;
+  Person: PersonResolvers<ContextType>;
   Query: QueryResolvers<ContextType>;
-  Timestamp: GraphQLScalarType;
-  URL: GraphQLScalarType;
 };
diff --git a/server/src/index.ts b/server/src/index.ts
index 0e062a2..49f3b8b 100644
--- a/server/src/index.ts
+++ b/server/src/index.ts
@@ -1,6 +1,11 @@
 import { ApolloServer, gql } from "apollo-server";
 import * as fs from "fs";
-import { TimestampResolver, URLResolver } from "graphql-scalars";
+import {
+  EmailAddressResolver,
+  TimestampResolver,
+  URLResolver,
+} from "graphql-scalars";
+import { EmailAddress } from "graphql-scalars/mocks";
 import { Query, Resolvers } from "./generated/graphql";
 
 const typeDefs = gql`
@@ -13,20 +18,19 @@ interface LoadingDataContext {
 
 const resolvers: Resolvers<LoadingDataContext> = {
   Query: {
-    hello: async (parent, args, context, info) => {
-      return context.Query.hello;
+    me(parent, args, context, info) {
+      return null;
     },
-    url: async (parent, args, context, info) => {
-      return context.Query.url;
+  },
+  Person: {
+    name(parent, args, context, info) {
+      return parent.name;
     },
-    search: async (parent, args, context, info) => {
-      const from = args.from;
-      const to = args.to;
-      return [];
+    emailAddress(parent, args, context, info) {
+      return parent.emailAddress;
     },
   },
-  URL: URLResolver,
-  Timestamp: TimestampResolver,
+  EmailAddress: EmailAddressResolver,
 };
 
 const readJsonFile = async (relativeFileName: string): Promise<any> => {
